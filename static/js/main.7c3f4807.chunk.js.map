{"version":3,"sources":["blockchain/utils.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","alert","console","log","provider","providers","HttpProvider","getContracts","networkId","Object","keys","WETG","networks","deployedNetwork","wetg","eth","Contract","abi","address","methods","Home","contracts","accounts","React","useState","etherem","setEtherem","wrappedToken","setWrappedToken","handleEthereumSwap","e","preventDefault","ethInWei","utils","toWei","mint","send","from","value","on","tx","handleWETGSwap","withdraw","onSubmit","type","name","placeholder","onChange","amount","target","readOnly","App","setWeb3","setAccounts","setContracts","useEffect","getAccounts","length","init","className","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c3f4807.chunk.js","sourcesContent":["import Web3 from \"web3\";\nimport WETG from \"../contracts/WETG.json\";\nimport ERC20Abi from \"./ERC20abi.json\";\n\nconst getWeb3 = () => {\n  return new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          alert(\"yes\");\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://localhost:9545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n};\n\nconst getContracts = async (web3) => {\n  //console.log(web3.eth.net);\n  const networkId = Object.keys(WETG.networks)[0];\n  console.log(networkId);\n  const deployedNetwork = WETG.networks[networkId];\n  const wetg = new web3.eth.Contract(\n    WETG.abi,\n    deployedNetwork && deployedNetwork.address\n  );\n  console.log(\"dex\", wetg.methods);\n  return wetg;\n};\n\nexport { getWeb3, getContracts };\n","import React from \"react\";\nimport EthereumSwap from \"./EthereumSwap\";\nimport WetgSwap from \"./WetgSwap\";\n\nfunction Home({ web3, contracts, accounts }) {\n  const [etherem, setEtherem] = React.useState(0);\n  const [wrappedToken, setWrappedToken] = React.useState(0);\n\n  const handleEthereumSwap = async (e) => {\n    e.preventDefault();\n    const ethInWei = web3.utils.toWei(etherem, \"ether\");\n\n    console.log(\"12\", contracts);\n    const tx = await contracts.methods\n      .mint()\n      .send({ from: accounts[0], value: ethInWei })\n      .on(\"receipt\", function () {\n        console.log(\"success\");\n      });\n\n    console.log(tx);\n  };\n\n  const handleWETGSwap = async (e) => {\n    e.preventDefault();\n    const ethInWei = web3.utils.toWei(wrappedToken, \"ether\");\n\n    console.log(\"12\", contracts);\n    const tx = await contracts.methods\n      .withdraw(ethInWei)\n      .send({ from: accounts[0] })\n      .on(\"receipt\", function () {\n        console.log(\"success\");\n      });\n\n    console.log(tx);\n  };\n\n  return (\n    <>\n      <h1>Swap Ethereum </h1>\n      <form onSubmit={handleEthereumSwap}>\n        <input\n          type=\"text\"\n          name=\"eth\"\n          placeholder=\"ETH\"\n          onChange={(amount) => setEtherem(amount.target.value)}\n        />\n        <input\n          type=\"text\"\n          name=\"wetg\"\n          readOnly={true}\n          value={etherem + \" WETG\"}\n        />\n\n        <input type=\"submit\" value=\"submit\" />\n      </form>\n      <hr />\n      <h1>Swap Wrapped ETG</h1>\n      <form onSubmit={handleWETGSwap}>\n        <input\n          type=\"text\"\n          name=\"wetg\"\n          placeholder=\"WETG\"\n          onChange={(amount) => setWrappedToken(amount.target.value)}\n        />\n        <input\n          type=\"text\"\n          name=\"eth\"\n          value=\"ETH\"\n          readOnly={true}\n          value={wrappedToken + \" ETH\"}\n        />\n\n        <input type=\"submit\" value=\"submit\" />\n      </form>\n    </>\n  );\n}\n\nexport default Home;\n","import React, { useState, useEffect } from \"react\";\nimport { getWeb3, getContracts } from \"./blockchain/utils\";\n\nimport Home from \"./components/Home\";\nimport \"./App.css\";\n\nfunction App() {\n  const [web3, setWeb3] = useState(\"undefined\");\n  const [accounts, setAccounts] = useState([]);\n  const [contracts, setContracts] = useState(\"undefined\");\n  // const [loader, setLoader] = useState(false);\n\n  useEffect(() => {\n    //listening to metamask and retieving the accounts and contracts\n    const init = async () => {\n      const web3 = await getWeb3();\n      const contracts = await getContracts(web3);\n      const accounts = await web3.eth.getAccounts();\n\n      //console.log(contracts);\n      console.log(accounts.length >= 0);\n      setWeb3(web3);\n      setContracts(contracts);\n      setAccounts(accounts);\n    };\n    init();\n    window.ethereum.on(\"accountsChanged\", (accounts) => {\n      setAccounts(accounts);\n    });\n  }, []);\n\n  //checking the status\n  const isReady = () => {\n    return (\n      typeof web3 != \"undefined\" &&\n      typeof contracts != \"undefined\" &&\n      accounts.length >= 0\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      {isReady() && accounts.length > 0 ? (\n        <Home web3={web3} contracts={contracts} accounts={accounts} />\n      ) : (\n        <p>Loading...!</p>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}